from sentence_transformers import SentenceTransformer
from typing import List, Union
import numpy as np
import logging

logger = logging.getLogger(__name__)

class EmbeddingService:
    def __init__(self, model_name: str = 'all-MiniLM-L6-v2'):
        """
        Initializes the EmbeddingService with a specified SentenceTransformer model.

        Args:
            model_name (str): The name of the SentenceTransformer model to load.
        """
        try:
            self.model = SentenceTransformer(model_name)
            logger.info(f"Successfully loaded SentenceTransformer model: {model_name}")
        except Exception as e:
            logger.error(f"Error loading SentenceTransformer model {model_name}: {e}", exc_info=True)
            # Fallback or raise - for now, we'll allow it to fail and subsequent calls will error
            self.model = None

        # Determine vector dimension if model loaded successfully
        if self.model:
            self.dimension = self.model.get_sentence_embedding_dimension()
            logger.info(f"Embedding dimension for model {model_name}: {self.dimension}")
        else:
            # A common dimension for all-MiniLM-L6-v2 is 384, but this is a guess if model fails to load
            self.dimension = 384
            logger.warning(f"Model {model_name} failed to load. Assuming dimension {self.dimension}. Embeddings will not work.")


    def generate_embeddings(self, texts: Union[str, List[str]]) -> Union[np.ndarray, List[np.ndarray]]:
        """
        Generates embeddings for the given text(s).

        Args:
            texts (Union[str, List[str]]): A single text string or a list of text strings.

        Returns:
            Union[np.ndarray, List[np.ndarray]]: A single embedding or a list of embeddings.
                                                 Returns None if the model failed to load.
        """
        if not self.model:
            logger.error("Embedding model is not loaded. Cannot generate embeddings.")
            return None

        try:
            #show_progress_bar=True can be added for long lists
            embeddings = self.model.encode(texts, convert_to_numpy=True)
            logger.info(f"Generated embeddings for {len(texts) if isinstance(texts, list) else 1} text(s).")
            return embeddings
        except Exception as e:
            logger.error(f"Error generating embeddings: {e}", exc_info=True)
            return None

    def get_dimension(self) -> int:
        """Returns the dimension of the embeddings generated by the model."""
        if not self.model:
             logger.warning("Model not loaded, returning assumed dimension.")
        return self.dimension
